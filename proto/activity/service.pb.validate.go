// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: activity/service.proto

package activity

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on DescribeARNRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeARNRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DescribeARNRequest_Arn_Pattern.MatchString(m.GetArn()) {
		return DescribeARNRequestValidationError{
			field:  "Arn",
			reason: "value does not match regex pattern \"^arn:.*$\"",
		}
	}

	return nil
}

// DescribeARNRequestValidationError is the validation error returned by
// DescribeARNRequest.Validate if the designated constraints aren't met.
type DescribeARNRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeARNRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeARNRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeARNRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeARNRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeARNRequestValidationError) ErrorName() string {
	return "DescribeARNRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeARNRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeARNRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeARNRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeARNRequestValidationError{}

var _DescribeARNRequest_Arn_Pattern = regexp.MustCompile("^arn:.*$")

// Validate checks the field values on DescribeARNResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeARNResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeARNResponseValidationError{
				field:  "Arn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeARNResponseValidationError is the validation error returned by
// DescribeARNResponse.Validate if the designated constraints aren't met.
type DescribeARNResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeARNResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeARNResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeARNResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeARNResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeARNResponseValidationError) ErrorName() string {
	return "DescribeARNResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeARNResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeARNResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeARNResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeARNResponseValidationError{}

// Validate checks the field values on ListCloudTrailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudTrailRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetProjectId() <= 0 {
		return ListCloudTrailRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetAwsId() <= 0 {
		return ListCloudTrailRequestValidationError{
			field:  "AwsId",
			reason: "value must be greater than 0",
		}
	}

	if utf8.RuneCountInString(m.GetRegion()) < 1 {
		return ListCloudTrailRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 runes",
		}
	}

	if val := m.GetStartTime(); val < 0 || val > 253402268399 {
		return ListCloudTrailRequestValidationError{
			field:  "StartTime",
			reason: "value must be inside range [0, 253402268399]",
		}
	}

	if val := m.GetEndTime(); val < 0 || val > 253402268399 {
		return ListCloudTrailRequestValidationError{
			field:  "EndTime",
			reason: "value must be inside range [0, 253402268399]",
		}
	}

	// no validation rules for AttributeKey

	// no validation rules for AttributeValue

	// no validation rules for NextToken

	return nil
}

// ListCloudTrailRequestValidationError is the validation error returned by
// ListCloudTrailRequest.Validate if the designated constraints aren't met.
type ListCloudTrailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudTrailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudTrailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudTrailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudTrailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudTrailRequestValidationError) ErrorName() string {
	return "ListCloudTrailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudTrailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudTrailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudTrailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudTrailRequestValidationError{}

// Validate checks the field values on ListCloudTrailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudTrailResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetCloudtrail() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudTrailResponseValidationError{
					field:  fmt.Sprintf("Cloudtrail[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextToken

	return nil
}

// ListCloudTrailResponseValidationError is the validation error returned by
// ListCloudTrailResponse.Validate if the designated constraints aren't met.
type ListCloudTrailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudTrailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudTrailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudTrailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudTrailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudTrailResponseValidationError) ErrorName() string {
	return "ListCloudTrailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudTrailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudTrailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudTrailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudTrailResponseValidationError{}

// Validate checks the field values on ListConfigHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListConfigHistoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetProjectId() <= 0 {
		return ListConfigHistoryRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetAwsId() <= 0 {
		return ListConfigHistoryRequestValidationError{
			field:  "AwsId",
			reason: "value must be greater than 0",
		}
	}

	if utf8.RuneCountInString(m.GetRegion()) < 1 {
		return ListConfigHistoryRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetResourceType()) < 1 {
		return ListConfigHistoryRequestValidationError{
			field:  "ResourceType",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetResourceId()) < 1 {
		return ListConfigHistoryRequestValidationError{
			field:  "ResourceId",
			reason: "value length must be at least 1 runes",
		}
	}

	if val := m.GetLaterTime(); val < 0 || val > 253402268399 {
		return ListConfigHistoryRequestValidationError{
			field:  "LaterTime",
			reason: "value must be inside range [0, 253402268399]",
		}
	}

	if val := m.GetEarlierTime(); val < 0 || val > 253402268399 {
		return ListConfigHistoryRequestValidationError{
			field:  "EarlierTime",
			reason: "value must be inside range [0, 253402268399]",
		}
	}

	if _, ok := _ListConfigHistoryRequest_ChronologicalOrder_InLookup[m.GetChronologicalOrder()]; !ok {
		return ListConfigHistoryRequestValidationError{
			field:  "ChronologicalOrder",
			reason: "value must be in list [Reverse Forward ]",
		}
	}

	// no validation rules for StartingToken

	return nil
}

// ListConfigHistoryRequestValidationError is the validation error returned by
// ListConfigHistoryRequest.Validate if the designated constraints aren't met.
type ListConfigHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfigHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfigHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfigHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfigHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfigHistoryRequestValidationError) ErrorName() string {
	return "ListConfigHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfigHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfigHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfigHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfigHistoryRequestValidationError{}

var _ListConfigHistoryRequest_ChronologicalOrder_InLookup = map[string]struct{}{
	"Reverse": {},
	"Forward": {},
	"":        {},
}

// Validate checks the field values on ListConfigHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListConfigHistoryResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetConfiguration() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListConfigHistoryResponseValidationError{
					field:  fmt.Sprintf("Configuration[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextToken

	return nil
}

// ListConfigHistoryResponseValidationError is the validation error returned by
// ListConfigHistoryResponse.Validate if the designated constraints aren't met.
type ListConfigHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfigHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfigHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfigHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfigHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfigHistoryResponseValidationError) ErrorName() string {
	return "ListConfigHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfigHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfigHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfigHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfigHistoryResponseValidationError{}
