// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"

	activity "github.com/ca-risken/aws/proto/activity"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ActivityServiceClient is an autogenerated mock type for the ActivityServiceClient type
type ActivityServiceClient struct {
	mock.Mock
}

// DescribeARN provides a mock function with given fields: ctx, in, opts
func (_m *ActivityServiceClient) DescribeARN(ctx context.Context, in *activity.DescribeARNRequest, opts ...grpc.CallOption) (*activity.DescribeARNResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *activity.DescribeARNResponse
	if rf, ok := ret.Get(0).(func(context.Context, *activity.DescribeARNRequest, ...grpc.CallOption) *activity.DescribeARNResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*activity.DescribeARNResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *activity.DescribeARNRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCloudTrail provides a mock function with given fields: ctx, in, opts
func (_m *ActivityServiceClient) ListCloudTrail(ctx context.Context, in *activity.ListCloudTrailRequest, opts ...grpc.CallOption) (*activity.ListCloudTrailResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *activity.ListCloudTrailResponse
	if rf, ok := ret.Get(0).(func(context.Context, *activity.ListCloudTrailRequest, ...grpc.CallOption) *activity.ListCloudTrailResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*activity.ListCloudTrailResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *activity.ListCloudTrailRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigHistory provides a mock function with given fields: ctx, in, opts
func (_m *ActivityServiceClient) ListConfigHistory(ctx context.Context, in *activity.ListConfigHistoryRequest, opts ...grpc.CallOption) (*activity.ListConfigHistoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *activity.ListConfigHistoryResponse
	if rf, ok := ret.Get(0).(func(context.Context, *activity.ListConfigHistoryRequest, ...grpc.CallOption) *activity.ListConfigHistoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*activity.ListConfigHistoryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *activity.ListConfigHistoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewActivityServiceClient creates a new instance of ActivityServiceClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewActivityServiceClient(t testing.TB) *ActivityServiceClient {
	mock := &ActivityServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
