package main

import (
	"reflect"
	"testing"

	"github.com/ca-risken/aws/proto/activity"
)

func TestParse(t *testing.T) {
	cases := []struct {
		name    string
		input   string
		want    *activity.ARN
		wantErr bool
	}{
		{
			name:  "OK 1",
			input: "arn:aws:service:region:account-id:resouruce-type:path/resource-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "service",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "resouruce-type:path/resource-id",
				ResourceType: "",
				ResourceId:   "resource-id",
			},
		},
		{
			name:  "OK 2",
			input: "arn:aws:service:region:account-id:resouruce-type/resource-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "service",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "resouruce-type/resource-id",
				ResourceType: "",
				ResourceId:   "resource-id",
			},
		},
		{
			name:  "OK 3",
			input: "arn:aws:service:region:account-id:resource-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "service",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "resource-id",
				ResourceType: "",
				ResourceId:   "resource-id",
			},
		},
		{
			name:  "OK AWS::EC2::CustomerGateway",
			input: "arn:aws:ec2:region:account-id:customer-gateway/cgw-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "customer-gateway/cgw-id",
				ResourceType: "AWS::EC2::CustomerGateway",
				ResourceId:   "cgw-id",
			},
		},
		{
			name:  "OK AWS::EC2::EIP",
			input: "arn:aws:ec2:region:account-id:eip/eipalloc-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "eip/eipalloc-id",
				ResourceType: "AWS::EC2::EIP",
				ResourceId:   "eipalloc-id",
			},
		},
		{
			name:  "OK AWS::EC2::Host",
			input: "arn:aws:ec2:region:account-id:dedicated-host/host-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "dedicated-host/host-id",
				ResourceType: "AWS::EC2::Host",
				ResourceId:   "host-id",
			},
		},
		{
			name:  "OK AWS::EC2::Instance",
			input: "arn:aws:ec2:region:account-id:instance/instance-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "instance/instance-id",
				ResourceType: "AWS::EC2::Instance",
				ResourceId:   "instance-id",
			},
		},
		{
			name:  "OK AWS::EC2::InternetGateway",
			input: "arn:aws:ec2:region:account-id:internet-gateway/igw-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "internet-gateway/igw-id",
				ResourceType: "AWS::EC2::InternetGateway",
				ResourceId:   "igw-id",
			},
		},
		{
			name:  "OK AWS::EC2::NetworkAcl",
			input: "arn:aws:ec2:region:account-id:network-acl/nacl-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "network-acl/nacl-id",
				ResourceType: "AWS::EC2::NetworkAcl",
				ResourceId:   "nacl-id",
			},
		},
		{
			name:  "OK AWS::EC2::NetworkInterface",
			input: "arn:aws:ec2:region:account-id:network-interface/eni-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "network-interface/eni-id",
				ResourceType: "AWS::EC2::NetworkInterface",
				ResourceId:   "eni-id",
			},
		},
		{
			name:  "OK AWS::EC2::RouteTable",
			input: "arn:aws:ec2:region:account-id:route-table/route-table-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "route-table/route-table-id",
				ResourceType: "AWS::EC2::RouteTable",
				ResourceId:   "route-table-id",
			},
		},
		{
			name:  "OK AWS::EC2::SecurityGroup",
			input: "arn:aws:ec2:region:account-id:security-group/security-group-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "security-group/security-group-id",
				ResourceType: "AWS::EC2::SecurityGroup",
				ResourceId:   "security-group-id",
			},
		},
		{
			name:  "OK AWS::EC2::Subnet",
			input: "arn:aws:ec2:region:account-id:subnet/subnet-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "subnet/subnet-id",
				ResourceType: "AWS::EC2::Subnet",
				ResourceId:   "subnet-id",
			},
		},
		{
			name:  "OK AWS::CloudTrail::Trail",
			input: "arn:aws:cloudtrail:region:account-id:trail/trailname",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "cloudtrail",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "trail/trailname",
				ResourceType: "AWS::CloudTrail::Trail",
				ResourceId:   "trailname",
			},
		},
		{
			name:  "OK AWS::EC2::Volume",
			input: "arn:aws:ec2:region:account-id:volume/volume-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "volume/volume-id",
				ResourceType: "AWS::EC2::Volume",
				ResourceId:   "volume-id",
			},
		},
		{
			name:  "OK AWS::EC2::VPC",
			input: "arn:aws:ec2:region:account-id:vpc/vpc-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "vpc/vpc-id",
				ResourceType: "AWS::EC2::VPC",
				ResourceId:   "vpc-id",
			},
		},
		{
			name:  "OK AWS::EC2::VPNConnection",
			input: "arn:aws:ec2:region:account-id:vpn-connection/vpn-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "vpn-connection/vpn-id",
				ResourceType: "AWS::EC2::VPNConnection",
				ResourceId:   "vpn-id",
			},
		},
		{
			name:  "OK AWS::EC2::VPNGateway",
			input: "arn:aws:ec2:region:account-id:vpn-gateway/vgw-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "vpn-gateway/vgw-id",
				ResourceType: "AWS::EC2::VPNGateway",
				ResourceId:   "vgw-id",
			},
		},
		{
			name:  "OK AWS::EC2::NatGateway",
			input: "arn:aws:ec2:region:account-id:natgateway/id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "natgateway/id",
				ResourceType: "AWS::EC2::NatGateway",
				ResourceId:   "id",
			},
		},
		{
			name:  "OK AWS::EC2::EgressOnlyInternetGateway",
			input: "arn:aws:ec2:region:account-id:egress-only-internet-gateway/id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "egress-only-internet-gateway/id",
				ResourceType: "AWS::EC2::EgressOnlyInternetGateway",
				ResourceId:   "id",
			},
		},
		{
			name:  "OK AWS::EC2::VPCEndpoint",
			input: "arn:aws:ec2:region:account-id:vpc-endpoint/id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "vpc-endpoint/id",
				ResourceType: "AWS::EC2::VPCEndpoint",
				ResourceId:   "id",
			},
		},
		{
			name:  "OK AWS::EC2::VPCEndpointService",
			input: "arn:aws:ec2:region:account-id:vpc-endpoint-service/id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "vpc-endpoint-service/id",
				ResourceType: "AWS::EC2::VPCEndpointService",
				ResourceId:   "id",
			},
		},
		{
			name:  "OK AWS::EC2::FlowLog",
			input: "arn:aws:ec2:region:account-id:vpc-flow-log/id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "vpc-flow-log/id",
				ResourceType: "AWS::EC2::FlowLog",
				ResourceId:   "id",
			},
		},
		{
			name:  "OK AWS::EC2::VPCPeeringConnection",
			input: "arn:aws:ec2:region:account-id:vpc-peering-connection/id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "ec2",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "vpc-peering-connection/id",
				ResourceType: "AWS::EC2::VPCPeeringConnection",
				ResourceId:   "id",
			},
		},
		{
			name:  "OK AWS::Elasticsearch::Domain",
			input: "arn:aws:es:region:account-id:domain/domain-name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "es",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "domain/domain-name",
				ResourceType: "AWS::Elasticsearch::Domain",
				ResourceId:   "domain-name",
			},
		},
		{
			name:  "OK AWS::IAM::Group",
			input: "arn:aws:iam::account-id:group/group-name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "iam",
				Region:       "",
				AccountId:    "account-id",
				Resource:     "group/group-name",
				ResourceType: "AWS::IAM::Group",
				ResourceId:   "group-name",
			},
		},
		{
			name:  "OK AWS::IAM::Policy",
			input: "arn:aws:iam::account-id:policy/policy-name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "iam",
				Region:       "",
				AccountId:    "account-id",
				Resource:     "policy/policy-name",
				ResourceType: "AWS::IAM::Policy",
				ResourceId:   "policy-name",
			},
		},
		{
			name:  "OK AWS::IAM::Role",
			input: "arn:aws:iam::account-id:role/role-name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "iam",
				Region:       "",
				AccountId:    "account-id",
				Resource:     "role/role-name",
				ResourceType: "AWS::IAM::Role",
				ResourceId:   "role-name",
			},
		},
		{
			name:  "OK AWS::IAM::User",
			input: "arn:aws:iam::account-id:user/user-name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "iam",
				Region:       "",
				AccountId:    "account-id",
				Resource:     "user/user-name",
				ResourceType: "AWS::IAM::User",
				ResourceId:   "user-name",
			},
		},
		{
			name:  "OK AWS::ElasticLoadBalancing::LoadBalancer",
			input: "arn:aws:elasticloadbalancing:region:account-id:loadbalancer/name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "elasticloadbalancing",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "loadbalancer/name",
				ResourceType: "AWS::ElasticLoadBalancing::LoadBalancer",
				ResourceId:   "name",
			},
		},
		{
			name:  "OK AWS::ElasticLoadBalancingV2::LoadBalancer (ALB)",
			input: "arn:aws:elasticloadbalancing:region:account-id:loadbalancer/app/something/load-balancer-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "elasticloadbalancing",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "loadbalancer/app/something/load-balancer-id",
				ResourceType: "AWS::ElasticLoadBalancingV2::LoadBalancer",
				ResourceId:   "load-balancer-id",
			},
		},
		{
			name:  "OK AWS::ElasticLoadBalancingV2::LoadBalancer (NLB)",
			input: "arn:aws:elasticloadbalancing:region:account-id:loadbalancer/net/something/load-balancer-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "elasticloadbalancing",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "loadbalancer/net/something/load-balancer-id",
				ResourceType: "AWS::ElasticLoadBalancingV2::LoadBalancer",
				ResourceId:   "load-balancer-id",
			},
		},
		{
			name:  "OK AWS::ACM::Certificate",
			input: "arn:aws:acm:region:account-id:certificate/certificate-id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "acm",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "certificate/certificate-id",
				ResourceType: "AWS::ACM::Certificate",
				ResourceId:   "certificate-id",
			},
		},
		{
			name:  "OK AWS::RDS::DBInstance",
			input: "arn:aws:rds:region:account-id:db:db-instance-name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "rds",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "db:db-instance-name",
				ResourceType: "AWS::RDS::DBInstance",
				ResourceId:   "db-instance-name",
			},
		},
		{
			name:  "OK AWS::RDS::DBSubnetGroup",
			input: "arn:aws:rds:region:account-id:subgrp:subnet-group-name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "rds",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "subgrp:subnet-group-name",
				ResourceType: "AWS::RDS::DBSubnetGroup",
				ResourceId:   "subnet-group-name",
			},
		},
		{
			name:  "OK AWS::RDS::DBSecurityGroup",
			input: "arn:aws:rds:region:account-id:secgrp:security-group-name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "rds",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "secgrp:security-group-name",
				ResourceType: "AWS::RDS::DBSecurityGroup",
				ResourceId:   "security-group-name",
			},
		},
		{
			name:  "OK AWS::RDS::DBSnapshot",
			input: "arn:aws:rds:region:account-id:snapshot:snapshot-name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "rds",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "snapshot:snapshot-name",
				ResourceType: "AWS::RDS::DBSnapshot",
				ResourceId:   "snapshot-name",
			},
		},
		{
			name:  "OK AWS::RDS::DBCluster",
			input: "arn:aws:rds:region:account-id:cluster:cluster-name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "rds",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "cluster:cluster-name",
				ResourceType: "AWS::RDS::DBCluster",
				ResourceId:   "cluster-name",
			},
		},
		{
			name:  "OK AWS::RDS::DBClusterSnapshot",
			input: "arn:aws:rds:region:account-id:cluster-snapshot:snapshot-name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "rds",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "cluster-snapshot:snapshot-name",
				ResourceType: "AWS::RDS::DBClusterSnapshot",
				ResourceId:   "snapshot-name",
			},
		},
		{
			name:  "OK AWS::RDS::EventSubscription",
			input: "arn:aws:rds:region:account-id:es:name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "rds",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "es:name",
				ResourceType: "AWS::RDS::EventSubscription",
				ResourceId:   "name",
			},
		},
		{
			name:  "OK AWS::S3::Bucket",
			input: "arn:aws:s3:::bucket_name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "s3",
				Region:       "",
				AccountId:    "",
				Resource:     "bucket_name",
				ResourceType: "AWS::S3::Bucket",
				ResourceId:   "bucket_name",
			},
		},
		{
			name:  "OK AWS::Redshift::Cluster",
			input: "arn:aws:redshift:region:account-id:cluster:cluster-name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "redshift",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "cluster:cluster-name",
				ResourceType: "AWS::Redshift::Cluster",
				ResourceId:   "cluster-name",
			},
		},
		{
			name:  "OK AWS::Redshift::ClusterSnapshot",
			input: "arn:aws:redshift:region:account-id:snapshot:cluster-name/snapshot-name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "redshift",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "snapshot:cluster-name/snapshot-name",
				ResourceType: "AWS::Redshift::ClusterSnapshot",
				ResourceId:   "snapshot-name",
			},
		},
		{
			name:  "OK AWS::Redshift::ClusterParameterGroup",
			input: "arn:aws:redshift:region:account-id:parametergroup:parameter-group-name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "redshift",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "parametergroup:parameter-group-name",
				ResourceType: "AWS::Redshift::ClusterParameterGroup",
				ResourceId:   "parameter-group-name",
			},
		},
		{
			name:  "OK AWS::Redshift::ClusterSecurityGroup",
			input: "arn:aws:redshift:region:account-id:securitygroup:security-group-name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "redshift",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "securitygroup:security-group-name",
				ResourceType: "AWS::Redshift::ClusterSecurityGroup",
				ResourceId:   "security-group-name",
			},
		},
		{
			name:  "OK AWS::Redshift::ClusterSubnetGroup",
			input: "arn:aws:redshift:region:account-id:subnetgroup:name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "redshift",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "subnetgroup:name",
				ResourceType: "AWS::Redshift::ClusterSubnetGroup",
				ResourceId:   "name",
			},
		},
		{
			name:  "OK AWS::Redshift::EventSubscription",
			input: "arn:aws:redshift:region:account-id:eventsubscription:name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "redshift",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "eventsubscription:name",
				ResourceType: "AWS::Redshift::EventSubscription",
				ResourceId:   "name",
			},
		},
		{
			name:  "OK AWS::DynamoDB::Table",
			input: "arn:aws:dynamodb:region:account-id:table/tablename",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "dynamodb",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "table/tablename",
				ResourceType: "AWS::DynamoDB::Table",
				ResourceId:   "tablename",
			},
		},
		{
			name:  "OK AWS::CodeBuild::Project",
			input: "arn:aws:codebuild:region:account-id:resourcetype/resource",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "codebuild",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "resourcetype/resource",
				ResourceType: "AWS::CodeBuild::Project",
				ResourceId:   "resource",
			},
		},
		{
			name:  "OK AWS::CloudFront::Distribution",
			input: "arn:aws:cloudfront::account-id:distribution/a/b/c",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "cloudfront",
				Region:       "",
				AccountId:    "account-id",
				Resource:     "distribution/a/b/c",
				ResourceType: "AWS::CloudFront::Distribution",
				ResourceId:   "c",
			},
		},
		{
			name:  "OK AWS::ElasticBeanstalk::Application",
			input: "arn:aws:elasticbeanstalk:region:account-id:application/applicationname",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "elasticbeanstalk",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "application/applicationname",
				ResourceType: "AWS::ElasticBeanstalk::Application",
				ResourceId:   "applicationname",
			},
		},
		{
			name:  "OK AWS::ApiGateway::RestApi",
			input: "arn:aws:apigateway:region::/restapis/id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "apigateway",
				Region:       "region",
				AccountId:    "",
				Resource:     "/restapis/id",
				ResourceType: "AWS::ApiGateway::RestApi",
				ResourceId:   "id",
			},
		},
		{
			name:  "OK AWS::ApiGateway::Stage",
			input: "arn:aws:apigateway:region::/restapis/id/stages/name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "apigateway",
				Region:       "region",
				AccountId:    "",
				Resource:     "/restapis/id/stages/name",
				ResourceType: "AWS::ApiGateway::Stage",
				ResourceId:   "name",
			},
		},
		{
			name:  "OK AWS::ApiGatewayV2::Api",
			input: "arn:aws:apigateway:region::/apis/id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "apigateway",
				Region:       "region",
				AccountId:    "",
				Resource:     "/apis/id",
				ResourceType: "AWS::ApiGatewayV2::Api",
				ResourceId:   "id",
			},
		},
		{
			name:  "OK AWS::ApiGatewayV2::Stage",
			input: "arn:aws:apigateway:region::/apis/id/stages/name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "apigateway",
				Region:       "region",
				AccountId:    "",
				Resource:     "/apis/id/stages/name",
				ResourceType: "AWS::ApiGatewayV2::Stage",
				ResourceId:   "name",
			},
		},
		{
			name:  "OK AWS::CodePipeline::Pipeline",
			input: "arn:aws:codepipeline:region:account-id:name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "codepipeline",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "name",
				ResourceType: "AWS::CodePipeline::Pipeline",
				ResourceId:   "name",
			},
		},
		{
			name:  "OK AWS::SQS::Queue",
			input: "arn:aws:sqs:region:account-id:name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "sqs",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "name",
				ResourceType: "AWS::SQS::Queue",
				ResourceId:   "name",
			},
		},
		{
			name:  "OK AWS::KMS::Key",
			input: "arn:aws:kms:region:account-id:key/id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "kms",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "key/id",
				ResourceType: "AWS::KMS::Key",
				ResourceId:   "id",
			},
		},
		{
			name:  "OK AWS::SecretsManager::Secret",
			input: "arn:aws:secretsmanager:region:account-id:secret:id",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "secretsmanager",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "secret:id",
				ResourceType: "AWS::SecretsManager::Secret",
				ResourceId:   "id",
			},
		},
		{
			name:  "OK AWS::SNS::Topic",
			input: "arn:aws:sns:region:account-id:name",
			want: &activity.ARN{
				Partition:    "aws",
				Service:      "sns",
				Region:       "region",
				AccountId:    "account-id",
				Resource:     "name",
				ResourceType: "AWS::SNS::Topic",
				ResourceId:   "name",
			},
		},
		{
			name:    "NG",
			input:   "unknown/arn",
			wantErr: true,
		},
	}
	for _, c := range cases {
		t.Run(c.name, func(t *testing.T) {
			got, err := ParseARN(c.input)
			if (c.wantErr && err == nil) || (!c.wantErr && err != nil) {
				t.Fatalf("Unexpected error: wantErr=%t, err=%+v", c.wantErr, err)
			}
			if !reflect.DeepEqual(c.want, got) {
				t.Fatalf("Unexpected data: want=%+v, got=%+v", c.want, got)
			}
		})
	}
}
